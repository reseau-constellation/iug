{"version":3,"file":"index-DJ2MLiWI.js","sources":["../../../../node_modules/n-gram/index.js","../../../../node_modules/collapse-white-space/index.js","../../../../node_modules/trigram-utils/index.js"],"sourcesContent":["export const bigram = nGram(2)\nexport const trigram = nGram(3)\n\n/**\n * Factory returning a function that converts a value string to n-grams.\n *\n * @param {number} n\n */\nexport function nGram(n) {\n  if (\n    typeof n !== 'number' ||\n    Number.isNaN(n) ||\n    n < 1 ||\n    n === Number.POSITIVE_INFINITY\n  ) {\n    throw new Error('`' + n + '` is not a valid argument for `n-gram`')\n  }\n\n  return grams\n\n  /**\n   * Create n-grams from a given value.\n   *\n   * @template {string|Array<unknown>} T\n   * @param {T} [value]\n   * @returns {T extends any[] ? T : Array<string>}\n   */\n  function grams(value) {\n    /** @type {T extends any[] ? T : Array<string>} */\n    // @ts-expect-error: pretty sure this is fine.\n    const nGrams = []\n\n    if (value === null || value === undefined) {\n      return nGrams\n    }\n\n    const source = typeof value.slice === 'function' ? value : String(value)\n    let index = source.length - n + 1\n\n    if (index < 1) {\n      return nGrams\n    }\n\n    while (index--) {\n      nGrams[index] = source.slice(index, index + n)\n    }\n\n    return nGrams\n  }\n}\n","/**\n * @typedef {'html'|'js'} Style\n *\n * @typedef Options\n *   Configuration.\n * @property {Style} [style='js']\n *   Style of white space to support.\n * @property {boolean} [preserveLineEndings=false]\n *   Whether to collapse white space containing a line ending to that line\n *   ending.\n *   The default is to collapse to a single space.\n * @property {boolean} [trim=false]\n *   Whether to drop white space at the start and end of `value`.\n *   The default is to keep it.\n */\n\nconst js = /\\s+/g\nconst html = /[\\t\\n\\v\\f\\r ]+/g\n\n/**\n * Collapse white space.\n *\n * @param {string} value\n *   Value to collapse white space in.\n * @param {Style|Options} [options='js']\n *   Configuration.\n * @returns {string}\n *   Value with collapsed white space.\n */\nexport function collapseWhiteSpace(value, options) {\n  if (!options) {\n    options = {}\n  } else if (typeof options === 'string') {\n    options = {style: options}\n  }\n\n  const replace = options.preserveLineEndings ? replaceLineEnding : replaceSpace\n\n  return String(value).replace(\n    options.style === 'html' ? html : js,\n    options.trim ? trimFactory(replace) : replace\n  )\n}\n\n/**\n * Replace white space with a line ending as that line ending and otherwise a\n * space.\n *\n * @param {string} value\n * @returns {string}\n */\nfunction replaceLineEnding(value) {\n  const match = /\\r?\\n|\\r/.exec(value)\n  return match ? match[0] : ' '\n}\n\n/**\n * Replace white space with a space.\n *\n * @returns {string}\n */\nfunction replaceSpace() {\n  return ' '\n}\n\n/**\n * @param {(value: string) => string} replace\n */\nfunction trimFactory(replace) {\n  return dropOrReplace\n\n  /**\n   * Replace white space with nothing if it starts or ends the string.\n   * Calls `replace` otherwise.\n   *\n   * @param {string} value\n   * @param {number} index\n   * @param {string} all\n   * @returns {string}\n   */\n  function dropOrReplace(value, index, all) {\n    return index === 0 || index + value.length === all.length\n      ? ''\n      : replace(value)\n  }\n}\n","/**\n * @typedef {[string, number]} TrigramTuple\n * @typedef {TrigramTuple[]} TrigramTuples\n * @typedef {Record<string, number>} TrigramDictionary\n */\n\nimport {trigram} from 'n-gram'\nimport {collapseWhiteSpace} from 'collapse-white-space'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Clean `value`.\n * Removed general non-important (as in, for language detection) punctuation\n * marks, symbols, and digits.\n *\n * @param {string|null} [value]\n * @returns {string}\n */\nexport function clean(value) {\n  if (value === null || value === undefined) {\n    return ''\n  }\n\n  return collapseWhiteSpace(String(value).replace(/[\\u0021-\\u0040]+/g, ' '))\n    .trim()\n    .toLowerCase()\n}\n\n/**\n * Get clean, padded, trigrams.\n *\n * @param {string} [value]\n * @returns {string[]}\n */\nexport function trigrams(value) {\n  return trigram(' ' + clean(value) + ' ')\n}\n\n/**\n * Get an `Object` with trigrams as its attributes, and their occurence count as\n * their values.\n *\n * @param {string} value\n * @returns {TrigramDictionary}\n */\nexport function asDictionary(value) {\n  const values = trigrams(value)\n  /** @type {TrigramDictionary} */\n  const dictionary = {}\n  let index = -1\n\n  while (++index < values.length) {\n    if (own.call(dictionary, values[index])) {\n      dictionary[values[index]]++\n    } else {\n      dictionary[values[index]] = 1\n    }\n  }\n\n  return dictionary\n}\n\n/**\n * Get an `Array` containing trigram--count tuples from a given value.\n *\n * @param {string} value\n * @returns {TrigramTuples}\n */\nexport function asTuples(value) {\n  const dictionary = asDictionary(value)\n  /** @type {TrigramTuples} */\n  const tuples = []\n  /** @type {string} */\n  let trigram\n\n  for (trigram in dictionary) {\n    if (own.call(dictionary, trigram)) {\n      tuples.push([trigram, dictionary[trigram]])\n    }\n  }\n\n  tuples.sort(sort)\n\n  return tuples\n}\n\n/**\n * Get an `Array` containing trigram--count tuples from a given value.\n *\n * @param {TrigramTuples} tuples\n * @returns {TrigramDictionary}\n */\nexport function tuplesAsDictionary(tuples) {\n  /** @type {TrigramDictionary} */\n  const dictionary = {}\n  let index = -1\n\n  while (++index < tuples.length) {\n    dictionary[tuples[index][0]] = tuples[index][1]\n  }\n\n  return dictionary\n}\n\n/**\n * Deep regular sort on item at `1` in both `Object`s.\n *\n * @param {TrigramTuple} a\n * @param {TrigramTuple} b\n * @returns {number}\n */\nfunction sort(a, b) {\n  return a[1] - b[1]\n}\n"],"names":["nGram","trigram","grams","value","nGrams","source","index","js","html","collapseWhiteSpace","options","replace","replaceLineEnding","replaceSpace","trimFactory","match","dropOrReplace","all","own","clean","trigrams","asDictionary","values","dictionary","asTuples","tuples","sort","a","b"],"mappings":"AAAsBA,EAAM,CAAC,EACtB,MAAMC,EAAUD,EAAM,CAAC,EAOvB,SAASA,EAAM,EAAG,CACvB,GACE,OAAO,GAAM,UACb,OAAO,MAAM,CAAC,GACd,EAAI,GACJ,IAAM,OAAO,kBAEb,MAAM,IAAI,MAAM,IAAM,EAAI,wCAAwC,EAGpE,OAAOE,EASP,SAASA,EAAMC,EAAO,CAGpB,MAAMC,EAAS,CAAA,EAEf,GAAID,GAAU,KACZ,OAAOC,EAGT,MAAMC,EAAS,OAAOF,EAAM,OAAU,WAAaA,EAAQ,OAAOA,CAAK,EACvE,IAAIG,EAAQD,EAAO,OAAS,EAAI,EAEhC,GAAIC,EAAQ,EACV,OAAOF,EAGT,KAAOE,KACLF,EAAOE,CAAK,EAAID,EAAO,MAAMC,EAAOA,EAAQ,CAAC,EAG/C,OAAOF,CACT,CACF,CCjCA,MAAMG,EAAK,OACLC,EAAO,kBAYN,SAASC,EAAmBN,EAAOO,EAAS,CAC5CA,EAEM,OAAOA,GAAY,WAC5BA,EAAU,CAAC,MAAOA,CAAO,GAFzBA,EAAU,CAAA,EAKZ,MAAMC,EAAUD,EAAQ,oBAAsBE,EAAoBC,EAElE,OAAO,OAAOV,CAAK,EAAE,QACnBO,EAAQ,QAAU,OAASF,EAAOD,EAClCG,EAAQ,KAAOI,EAAYH,CAAO,EAAIA,CAC1C,CACA,CASA,SAASC,EAAkBT,EAAO,CAChC,MAAMY,EAAQ,WAAW,KAAKZ,CAAK,EACnC,OAAOY,EAAQA,EAAM,CAAC,EAAI,GAC5B,CAOA,SAASF,GAAe,CACtB,MAAO,GACT,CAKA,SAASC,EAAYH,EAAS,CAC5B,OAAOK,EAWP,SAASA,EAAcb,EAAOG,EAAOW,EAAK,CACxC,OAAOX,IAAU,GAAKA,EAAQH,EAAM,SAAWc,EAAI,OAC/C,GACAN,EAAQR,CAAK,CACnB,CACF,CC5EA,MAAMe,EAAM,CAAA,EAAG,eAUR,SAASC,EAAMhB,EAAO,CAC3B,OAAIA,GAAU,KACL,GAGFM,EAAmB,OAAON,CAAK,EAAE,QAAQ,oBAAqB,GAAG,CAAC,EACtE,KAAI,EACJ,YAAW,CAChB,CAQO,SAASiB,EAASjB,EAAO,CAC9B,OAAOF,EAAQ,IAAMkB,EAAMhB,CAAK,EAAI,GAAG,CACzC,CASO,SAASkB,EAAalB,EAAO,CAClC,MAAMmB,EAASF,EAASjB,CAAK,EAEvBoB,EAAa,CAAA,EACnB,IAAIjB,EAAQ,GAEZ,KAAO,EAAEA,EAAQgB,EAAO,QAClBJ,EAAI,KAAKK,EAAYD,EAAOhB,CAAK,CAAC,EACpCiB,EAAWD,EAAOhB,CAAK,CAAC,IAExBiB,EAAWD,EAAOhB,CAAK,CAAC,EAAI,EAIhC,OAAOiB,CACT,CAQO,SAASC,EAASrB,EAAO,CAC9B,MAAMoB,EAAaF,EAAalB,CAAK,EAE/BsB,EAAS,CAAA,EAEf,IAAIxB,EAEJ,IAAKA,KAAWsB,EACVL,EAAI,KAAKK,EAAYtB,CAAO,GAC9BwB,EAAO,KAAK,CAACxB,EAASsB,EAAWtB,CAAO,CAAC,CAAC,EAI9C,OAAAwB,EAAO,KAAKC,CAAI,EAETD,CACT,CA2BA,SAASC,EAAKC,EAAGC,EAAG,CAClB,OAAOD,EAAE,CAAC,EAAIC,EAAE,CAAC,CACnB","x_google_ignoreList":[0,1,2]}